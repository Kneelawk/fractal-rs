pub mod args;
pub mod color;
pub mod composite;
pub mod cpu;
pub mod gpu;
pub mod row_stitcher;
pub mod util;
pub mod view;

use crate::generator::{
    args::{Multisampling, Smoothing},
    view::View,
};
use num_complex::Complex;
use std::mem::size_of;
use tokio::sync::mpsc::Sender;
use wgpu::{Texture, TextureView};
use std::sync::Arc;

pub const BYTES_PER_PIXEL: usize = size_of::<u32>();

/// Represents a set of options passed to a fractal generator at initialization.
#[derive(Debug, Copy, Clone)]
pub struct FractalOpts {
    pub mandelbrot: bool,
    pub iterations: u32,
    pub smoothing: Smoothing,
    pub multisampling: Multisampling,
    pub c: Complex<f32>,
}

/// Represents a block of pixels, likely generated by a fractal generator.
#[derive(Clone, Debug)]
pub struct PixelBlock {
    pub view: View,
    pub image: Box<[u8]>,
}

/// Structs implementing this trait can be used to generate fractals.
///
/// Note: all these methods return futures because they may require
/// communication over a network.
#[async_trait]
pub trait FractalGenerator {
    /// Gets the recommended minimum number of views that should be submitted to
    /// this generator together as a single batch in order to operate
    /// efficiently.
    async fn min_views_hint(&self) -> anyhow::Result<usize>;

    /// Starts the generation of a fractal.
    async fn start_generation_to_cpu(
        &self,
        views: &[View],
        sender: Sender<anyhow::Result<PixelBlock>>,
    ) -> anyhow::Result<Box<dyn FractalGeneratorInstance + Send + 'static>>;

    /// Starts the generation of a fractal. This variant writes fractal image
    /// data directly to a gpu-side image instead of sending it as cpu-side
    /// pixel blocks.
    async fn start_generation_to_gpu(
        &self,
        views: &[View],
        texture: Arc<Texture>,
        texture_view: Arc<TextureView>,
    ) -> anyhow::Result<Box<dyn FractalGeneratorInstance + Send + 'static>>;
}

/// Represents a running fractal generator.
#[async_trait]
pub trait FractalGeneratorInstance {
    /// Gets this generator instance's current progress.
    async fn progress(&self) -> anyhow::Result<f32>;

    /// Checks whether this fractal generator instance is still running.
    async fn running(&self) -> anyhow::Result<bool>;
}
