// multisample.wgsl - This shader is responsible for taking the textures
// generated by the fractal generator and blending them together.

struct FragmentData {
    [[builtin(position)]] position: vec4<f32>;
    [[location(0)]] texture_position: vec2<f32>;
};

var indexable: array<vec2<f32>,6u> = array<vec2<f32>,6u>(
    vec2<f32>(1.0, 1.0), vec2<f32>(-1.0, -1.0), vec2<f32>(1.0, -1.0),
    vec2<f32>(1.0, 1.0), vec2<f32>(-1.0, 1.0), vec2<f32>(-1.0, -1.0)
);

// This will be replaced at shader load time.
let t_sample_count: u32 = 0u32;

[[group(0), binding(0)]]
var u_sampler: sampler;

[[group(0), binding(1)]]
var u_textures: texture_2d_array<f32>;

[[stage(vertex)]]
fn vert_main([[builtin(vertex_index)]] vert_index: u32) -> FragmentData {
    var data: FragmentData;
    let xy = indexable[vert_index];
    data.position = vec4<f32>(xy, 0.0, 1.0);
    let small_xy = (xy + vec2<f32>(1.0, 1.0)) / 2.0;
    data.texture_position = vec2<f32>(small_xy.x, 1.0 - small_xy.y);
    return data;
}

[[stage(fragment)]]
fn frag_main(data: FragmentData) -> [[location(0)]] vec4<f32> {
    var color = vec4<f32>(0.0, 0.0, 0.0, 0.0);

    for (var i = 0u32; i < t_sample_count; i = i + 1u32) {
        color = color + textureSample(u_textures, u_sampler, data.texture_position, i32(i)) / f32(t_sample_count);
    }

    return color;
}
